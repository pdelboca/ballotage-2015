install.packages(c("caret", "AppliedPredictiveModeling", "ElemStatLearn", "pgmm", "rpart"))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
install.packages("caret")
library(caret)
install.packages("car")
R.version
install.packages("installr"); library(installr)
install.packages("caret")
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
trainIndex <- createDataPartition(segmentationOriginal$Case, p=0.5, list = FALSE)
trainIndex <- createDataPartition(segmentationOriginal$Case, p=0.5, list = FALSE)
training <- segmentationOriginal[trainIndex,]
testing <- segmentationOriginal[-trainIndex, ]
fit <- train(Case ~ ., method="rpart", data=training)
library(rpart)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
set.seed(125)
trainIndex <- createDataPartition(segmentationOriginal$Case, p=0.5, list = FALSE)
training <- segmentationOriginal[trainIndex,]
testing <- segmentationOriginal[-trainIndex, ]
fit <- train(Case ~ ., method="rpart", data=training)
fit <- train(Case ~ ., method="rpart", data=training)
pred <- predict(fit, testing)
head(training)
head(testing)
trainIndex <- createDataPartition(segmentationOriginal$Class, p=0.5, list = FALSE)
training <- segmentationOriginal[trainIndex,]
testing <- segmentationOriginal[-trainIndex, ]
fit <- train(Case ~ ., method="rpart", data=training)
pred <- predict()
pred <- predict(fit, testing)
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test", ]
fit <- train(Class ~ ., method="rpart", data=training)
pred <- predict(fit, testing)
testing$Predicted <- pred
subset(testing, TotalIntench2 == 23000 & FiberWidthCh1 == 10 & PerimStatusCh1=2)$Predicted
subset(testing, TotalIntench2 == 23000 & FiberWidthCh1 == 10 & PerimStatusCh1==2)$Predicted
subset(testing, TotalIntenCh2 == 23000 & FiberWidthCh1 == 10 & PerimStatusCh1==2)$Predicted
subset(testing, TotalIntenCh2 == 23000 & FiberWidthCh1 == 10 & PerimStatusCh1==2)
testing$TotalIntenCh2
testing$TotalIntenCh2 == 23000
sum(testing$TotalIntenCh2 == 23000)
sum(testing$TotalIntenCh2 == 23,000)
summary(fit)
summary(fit$finalModel)
plot(fit$finalModel)
print(fit$finalModel)
df1 <- as.data.frame(TotalIntenCh2 == 23000, FiberWidthCh1 == 10, PerimStatusCh1==2)
df1 <- as.data.frame("TotalIntenCh2" = 23000, "FiberWidthCh1" = 10, "PerimStatusCh1"=2)
df1 <- as.data.frame(cbind("TotalIntenCh2" = 23000, "FiberWidthCh1" = 10, "PerimStatusCh1"=2))
df1
predict(fit, df1)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(fit)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(fit)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(fit)
fancyRpartPlot(fit$finalModel)
confusionMatrix(testing$Class, fit)
confusionMatrix(testing$Class, pred)
fit <- train(Class ~ ., method="glm", data=training)
pred <- predict(fit, testing)
testing$Predicted <- pred
confusionMatrix(testing$Class, pred)
library(ggplot2)
library(dataset)
data(airquality)
airquality <- airquality[!is.na(airquality$Ozone), ]
plot(airquality$Ozone, airquality$Temp)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.1)
pred <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
ll[i, ] <- pred
}
plot(airquality$Ozone, airquality$Temp, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
plot(airquality$Ozone, airquality$Temp, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
library(dataset)
data(airquality)
airquality <- airquality[!is.na(airquality$Ozone), ]
plot(airquality$Ozone, airquality$Temp)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.1)
pred <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
ll[i, ] <- pred
}
plot(airquality$Ozone, airquality$Temp, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
library(dataset)
data(airquality)
airquality <- airquality[!is.na(airquality$Ozone), ]
plot(airquality$Ozone, airquality$Temp)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.1)
pred <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
ll[i, ] <- pred
}
plot(airquality$Ozone, airquality$Temp, pch=19, cex=0.5)
#for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.5)
pred <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
ll[i, ] <- pred
}
plot(airquality$Ozone, airquality$Temp, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.2)
pred <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
ll[i, ] <- pred
}
plot(airquality$Ozone, airquality$Temp, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.05)
pred <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
ll[i, ] <- pred
}
plot(airquality$Ozone, airquality$Temp, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.1)
pred <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
ll[i, ] <- pred
}
plot(airquality$Ozone, airquality$Temp, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.05)
pred <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
ll[i, ] <- pred
}
plot(airquality$Ozone, airquality$Temp, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.5)
pred <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
ll[i, ] <- pred
}
plot(airquality$Ozone, airquality$Temp, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(airquality)[1], replace=TRUE)
airqualityTemp <- airquality[ss,]
airqualityTemp <- airqualityTemp[order(airqualityTemp$Ozone), ]
loessTemp <- loess(Temp ~ Ozone, data = airqualityTemp, span=0.2)
pred <- predict(loessTemp, newdata=data.frame("Ozone" = 1:155))
ll[i, ] <- pred
}
plot(airquality$Ozone, airquality$Temp, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey",lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
library(pgmm)
library(pgmm)
data(olive)
library(pgmm)
data(olive)
olive = olive[,-1]
summary(olive)
library(caret)
library(rattle)
fitOlive <- train(Area ~ ., method = "rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
pred <- predict(fitOlive, newdata = newdata)
o2 <- olive
o2$Area <- as.factor(o2$Area)
fitO2 <- train(Area ~ ., method = "rpart", data = o2)
pred <- predict(fitO2, newdata = newdata)
library(ElemStatLearn)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(SAheart)
set.seed(13234)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method="glm",
family="binomial",
data=trainSA)
fit <- train(as.factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl,
method="glm",
family="binomial",
data=trainSA)
prediction <- predict(fit, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, prediction)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method="glm",
family="binomial",
data=trainSA)
prediction <- predict(fit, testSA)
missClass(testSA$chd, prediction)
summary(fit)
prin(fit)
print(fit)
predictionTrain <- predict(fit, trainSA)
missClass(trainSA$chd, predictionTrain)
missClass(testSA$chd, predictionTest)
predictionTest <- predict(fit, testSA)
missClass(testSA$chd, predictionTest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
fit <- train(y ~ ., data=vowel.test, method="rf")
fit <- train(y ~ ., data=vowel.test, method="rf")
varImp(fit)
varImp(fit, scale = FALSE)
fit
summary(fit)
set.seed(33833)
fit <- train(y ~ ., data=vowel.test, method="rf")
fit <- train(y ~ ., data=vowel.train, method="rf")
varImp(fit)
fit <- train(y ~ ., data=rbind(vowel.test, vowel.train), method="rf")
varImp(fit)
fit <- train(y ~ ., data=vowel.train, method="rf")
varImp(fit, useModel = TRUE)
varImp(fit, useModel = FALSE)
varImp(fit, useModel = FALSE)
varImp(fit, useModel = FALSE, nonpara = FALSE)
varImp(fit, useModel = FALSE, nonpara = TRUE)
varImp(fit, useModel = FALSE, nonpara = TRUE, scale = TRUE)
varImp(fit, useModel = FALSE, nonpara = TRUE, scale = FALSE)
varImp(fit, useModel = TRUE, nonpara = TRUE, scale = FALSE)
varImp(fit, useModel = TRUE, nonpara = FALSE, scale = FALSE)
varImp(fit, useModel = FALSE, nonpara = FALSE, scale = FALSE)
set.seed(33833)
fit <- train(y ~ ., data=vowel.train, method="rf")
varImp(fit, useModel = FALSE, nonpara = FALSE, scale = FALSE)
varImp(fit, useModel = FALSE, nonpara = FALSE, scale = TRUE)
varImp(fit, useModel = FALSE, nonpara = TRUE, scale = TRUE)
varImp(fit, useModel = FALSE, nonpara = TRUE, scale = FALSE)
varImp(fit, useModel = TRUE, nonpara = FALSE, scale = FALSE)
varImp(fit, useModel = TRUE, nonpara = FALSE, scale = TRUE)
varImp(fit, useModel = TRUE, nonpara = FALSE)
varImp(fit, useModel = TRUE, nonpara = TRUE)
varImp(fit, useModel = TRUE)
varImp(fit, useModel = FALSE)
varImp(fit, useModel = TRUE)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method="glm",
family="binomial",
data=trainSA)
predictionTrain <- predict(fit, trainSA)
predictionTest <- predict(fit, testSA)
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
missClass(trainSA$chd, predictionTrain)
missClass(testSA$chd, predictionTest)
library(ggplot2)
theme_set(theme_grey()) # set default theme for plots
library(dplyr)
library(reshape2)
library(knitr)
opts_chunk$set(echo=FALSE, message=FALSE, warning = FALSE, results='hide')
setwd("~/Repos/pdelboca/ballotage-2015")
df <- read.csv('./data/mesas_final_balotaje_2015.csv')
prov <- data.frame(id = c(1:24), provincia=c("CABA","Buenos Aires","Catamarca","Cordoba","Corrientes","Chaco","Chubut","Entre Rios", "Formosa","Jujuy","La Pampa","La Rioja","Mendoza","Misiones","Neuquen","Rio Negro","Salta","San Juan", "San Luis", "Santa Cruz", "Santa Fe", "Santiago del Estero", "Tucuman", "Tierra del Fuego"))
colnames(df)[1] <- "provincia_id"
df <- merge(prov, df, by.x = "id", by.y = "provincia_id")
df$id <- NULL
knitr::kable(dfTemp[,c("provincia")])
dfTemp <- df[df$porc_cambiemos == 100, columnas] %>%
mutate(Sites = paste0("[Link al Telegrama](", url,")"))
View(df)
dfTemp <- df[df$porc_cambiemos == 100, ] %>%
mutate(Sites = paste0("[Link al Telegrama](", url,")"))
View(dfTemp)
